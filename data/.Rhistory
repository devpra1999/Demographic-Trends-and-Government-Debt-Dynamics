names(ret.vals) = c("beta", "residual.sd", "r.square")
return(ret.vals)
}
reg.vals = sapply(reg.list, FUN=extractRegVals)
t(reg.vals)
#setwd(path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#clear the environment
rm(list=ls())
# install and load the relevant packages
# packages used
listofpackages <- c("readr","xlsx")
for (j in listofpackages){
if(sum(installed.packages()[, 1] == j) == 0) {
install.packages(j)
}
library(j, character.only = T)
}
urlfile="https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv"
COVID_all<-read_csv(url(urlfile))
LOMBARDIA=subset(COVID_all,denominazione_regione=="Lombardia",select=c(1:1,4:4,7:17))
VENETO=subset(COVID_all,denominazione_regione=="Veneto",select=c(1:1,4:4,7:17))
write.csv(LOMBARDIA, "LOMBARDIA.csv")
write.csv(VENETO, "VENETO.csv")
#setwd(path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#clear the environment
rm(list=ls())
# install and load the relevant packages
# packages used
listofpackages <- c("ellipse","reshape2","ggplot2","dygraphs", "dplyr","forecast", "aod","readr","xlsx")
for (j in listofpackages){
if(sum(installed.packages()[, 1] == j) == 0) {
install.packages(j)
}
library(j, character.only = T)
}
urlfile="https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv"
COVID_all<-read_csv(url(urlfile))
LOMBARDIA=subset(COVID_all,denominazione_regione=="Lombardia",select=c(1:1,4:4,7:20))
VENETO=subset(COVID_all,denominazione_regione=="Veneto",select=c(1:1,4:4,7:20))
write.csv(LOMBARDIA, "LOMBARDIA.csv")
write.csv(VENETO, "VENETO.csv")
REGIONS <- COVID_all[2458:2478,1:20]
POP = c(1311580, 562869,533373,1947131,5801692,4459477,1215220,5879082,1550640,10060574,1525271,305617,4356406,4029053,1639591,4999891,3729641,541380,882015,125666,4905854)
AREA=c(10795,9992,7398,15080,13595,22451,7907,17207,5421,23861,9366,4438,25399,19363,24090,25707,22993,6207,8456,3263,18316)
REGIONS$POP=POP
REGIONS$AREA=AREA
REGIONS$LETHALITY=(REGIONS$deceduti/REGIONS$POP)*1000000
REGIONS$DENSITY=REGIONS$POP/REGIONS$AREA
REGIONS$TOTCASI_R=(REGIONS$totale_casi/REGIONS$POP)*1000000
#NBA_4F$team_acr=rownames(NBA_4F)
p <- ggplot(REGIONS, aes(DENSITY,LETHALITY)) + geom_point(colour="green",size=3) + geom_text(aes(label=denominazione_regione),hjust=0, vjust=0,colour="blue")
# Add regression line
p + geom_smooth(method = lm,colour="red")
p <- ggplot(REGIONS, aes(DENSITY,deceduti)) + geom_point(colour="green",size=3) + geom_text(aes(label=denominazione_regione),hjust=0, vjust=0,colour="blue")
# Add regression line
p + geom_smooth(method = lm,colour="red")
p <- ggplot(REGIONS, aes(DENSITY,TOTCASI_R)) + geom_point(colour="green",size=3) + geom_text(aes(label=denominazione_regione),hjust=0, vjust=0,colour="blue")
# Add regression line
p + geom_smooth(method = lm,colour="red")
p <- ggplot(REGIONS, aes(DENSITY,totale_casi)) + geom_point(colour="green",size=3) + geom_text(aes(label=denominazione_regione),hjust=0, vjust=0,colour="blue")
# Add regression line
p + geom_smooth(method = lm,colour="red")
View(LOMBARDIA)
plot(lombardia$variazione_totale_positivi)
plot(LOMBARDIA$variazione_totale_positivi)
p <- ggplot(LOMBARDIA, aes(variazione_totale_positivi,deceduti)) + geom_point(colour="green",size=3) + geom_text(aes(label=denominazione_regione),hjust=0, vjust=0,colour="blue")
# Add regression line
p + geom_smooth(method = lm,colour="red")
View(LOMBARDIA)
p <- ggplot(LOMBARDIA, aes(variazione_totale_positivi,data)) + geom_point(colour="green",size=3),hjust=0, vjust=0,colour="blue")
# Add regression line
p + geom_smooth(method = lm,colour="red")
p <- ggplot(LOMBARDIA, aes(variazione_totale_positivi,data)) + geom_point(colour="green",size=3)
# Add regression line
p <- ggplot(LOMBARDIA, aes(variazione_totale_positivi,data)) + geom_point(colour="green",size=3)
# Add regression line
L=5
#setwd(path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#clear the environment
rm(list=ls())
# install and load the relevant packages
# packages used
listofpackages <- c("ellipse","reshape2","ggplot2","dygraphs", "dplyr","forecast", "aod","readr","xlsx")
for (j in listofpackages){
if(sum(installed.packages()[, 1] == j) == 0) {
install.packages(j)
}
library(j, character.only = T)
}
urlfile="https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv"
COVID_all<-read_csv(url(urlfile))
LOMBARDIA=subset(COVID_all,denominazione_regione=="Lombardia",select=c(1:1,4:4,7:20))
VENETO=subset(COVID_all,denominazione_regione=="Veneto",select=c(1:1,4:4,7:20))
write.csv(LOMBARDIA, "LOMBARDIA.csv")
write.csv(VENETO, "VENETO.csv")
REGIONS <- COVID_all[4348:4368,1:20]
POP = c(1311580, 562869,533373,1947131,5801692,4459477,1215220,5879082,1550640,10060574,1525271,305617,4356406,4029053,1639591,4999891,3729641,541380,882015,125666,4905854)
AREA=c(10795,9992,7398,15080,13595,22451,7907,17207,5421,23861,9366,4438,25399,19363,24090,25707,22993,6207,8456,3263,18316)
REGIONS$POP=POP
REGIONS$AREA=AREA
REGIONS$LETHALITY=(REGIONS$deceduti/REGIONS$POP)*1000000
REGIONS$DENSITY=REGIONS$POP/REGIONS$AREA
REGIONS$TOTCASI_R=(REGIONS$totale_casi/REGIONS$POP)*1000000
#NBA_4F$team_acr=rownames(NBA_4F)
p <- ggplot(REGIONS, aes(DENSITY,LETHALITY)) + geom_point(colour="green",size=3) + geom_text(aes(label=denominazione_regione),hjust=0, vjust=0,colour="blue")
# Add regression line
p + geom_smooth(method = lm,colour="red")
p <- ggplot(REGIONS, aes(DENSITY,deceduti)) + geom_point(colour="green",size=3) + geom_text(aes(label=denominazione_regione),hjust=0, vjust=0,colour="blue")
# Add regression line
p + geom_smooth(method = lm,colour="red")
p <- ggplot(REGIONS, aes(DENSITY,TOTCASI_R)) + geom_point(colour="green",size=3) + geom_text(aes(label=denominazione_regione),hjust=0, vjust=0,colour="blue")
# Add regression line
p + geom_smooth(method = lm,colour="red")
p <- ggplot(REGIONS, aes(DENSITY,totale_casi)) + geom_point(colour="green",size=3) + geom_text(aes(label=denominazione_regione),hjust=0, vjust=0,colour="blue")
# Add regression line
p + geom_smooth(method = lm,colour="red")
View(COVID_all)
REGIONS <- COVID_all[5503:5523,1:20]
POP = c(1311580, 562869,533373,1947131,5801692,4459477,1215220,5879082,1550640,10060574,1525271,305617,4356406,4029053,1639591,4999891,3729641,541380,882015,125666,4905854)
AREA=c(10795,9992,7398,15080,13595,22451,7907,17207,5421,23861,9366,4438,25399,19363,24090,25707,22993,6207,8456,3263,18316)
REGIONS$POP=POP
REGIONS$AREA=AREA
REGIONS$LETHALITY=(REGIONS$deceduti/REGIONS$POP)*1000000
REGIONS$DENSITY=REGIONS$POP/REGIONS$AREA
REGIONS$TOTCASI_R=(REGIONS$totale_casi/REGIONS$POP)*1000000
#NBA_4F$team_acr=rownames(NBA_4F)
p <- ggplot(REGIONS, aes(DENSITY,LETHALITY)) + geom_point(colour="green",size=3) + geom_text(aes(label=denominazione_regione),hjust=0, vjust=0,colour="blue")
# Add regression line
p + geom_smooth(method = lm,colour="red")
p <- ggplot(REGIONS, aes(DENSITY,deceduti)) + geom_point(colour="green",size=3) + geom_text(aes(label=denominazione_regione),hjust=0, vjust=0,colour="blue")
# Add regression line
p + geom_smooth(method = lm,colour="red")
p <- ggplot(REGIONS, aes(DENSITY,TOTCASI_R)) + geom_point(colour="green",size=3) + geom_text(aes(label=denominazione_regione),hjust=0, vjust=0,colour="blue")
# Add regression line
p + geom_smooth(method = lm,colour="red")
p <- ggplot(REGIONS, aes(DENSITY,totale_casi)) + geom_point(colour="green",size=3) + geom_text(aes(label=denominazione_regione),hjust=0, vjust=0,colour="blue")
# Add regression line
p + geom_smooth(method = lm,colour="red")
View(REGIONS)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
# packages used
listofpackages <- c("dygraphs", "dplyr","ellipse","reshape2","ggplot2","xts")
for (j in listofpackages){
if(sum(installed.packages()[, 1] == j) == 0) {
install.packages(j)
}
library(j, character.only = T)
}
ffdata <- read.table("data/FF_Data_2020_10.csv", sep = ",", header = T, stringsAsFactors = F)
head(ffdata)
str(ffdata)
names(ffdata)
View(ffdata)
ffdata$date <- ffdata$X.1 %/% 100 + (ffdata$X.1 %% 100 - 1) /12
ffdata$X<- NULL
ffdata$X.1<- NULL
dates <-seq(as.Date("1926-07-15"),length=1133, by="months")
params <- c("exret_mkt","FF_SMB","FF_HML","FF_RMW","FF_CMA","RF","FF_MOM", "PR15")
data <- ffdata[, c(params)]
tsdata <- xts(data, order.by=dates) # creates a time series object
tsdata <- na.omit(tsdata) # omitting the rows with NA presence
## having created the database with all observation we generate a su
tsdata1 <- tsdata["1980-01-15/2020-10-15"]
tsdata1[,] <- tsdata1[,] * 0.01
tsdata1$r_mkt <- tsdata1$exret_mkt + tsdata1$RF
# now want to obtain the excess returns
tsdata1$exret_15 <- tsdata1[, "PR15"]-tsdata1$RF
tsdata1$cum_mkt <- tsdata1$cum_15 <- array(data = NA, dim = nrow(tsdata1))
tsdata1[1, c("cum_mkt", "cum_15")] <- 1
t1<-nrow(tsdata1)
for (i in 2:t1) {
tsdata1[i, "cum_mkt"][[1]]=tsdata1[i-1, "cum_mkt"][[1]]*(1+tsdata1[i, "r_mkt"][[1]])
tsdata1[i, "cum_15"][[1]]=tsdata1[i-1, "cum_15"][[1]]*(1+tsdata1[i, "PR15"][[1]])
}
plot(tsdata1$exret_mkt, ylab = "Returns", main = "S&P500 ", col = "blue", lwd = 2)
lines(tsdata1$exret_15, col = "red")
plot(tsdata1$cum_mkt,
type = "l", col = "red", ylim = c(0, 350),
ylab = "cumulative return mkt")
lines(tsdata1$cum_15, col = "blue",type = "l")
fm1 <- lm(PR15 ~ r_mkt, data=tsdata1.df)
tsdata1.df <- as.data.frame(tsdata1)
fm1 <- lm(PR15 ~ r_mkt, data=tsdata1.df)
summary(fm1)
plot(x=tsdata1.df$r_mkt, y=tsdata1.df$PR15, col="red")
lines(x=tsdata1.df$r_mkt, y=fitted(fm1),col = "blue")
View(tsdata)
View(tsdata1)
tsdata1$cum_mkt <- tsdata1$cum_15 <- tsdata1$cum_FF_SMB<- tsdata1$cum_FF_HML<- array(data = NA, dim = nrow(tsdata1))
tsdata1[1, c("cum_mkt", "cum_15")] <- 1
t1<-nrow(tsdata1)
for (i in 2:t1) {
tsdata1[i, "cum_mkt"][[1]]=tsdata1[i-1, "cum_mkt"][[1]]*(1+tsdata1[i, "r_mkt"][[1]])
tsdata1[i, "cum_15"][[1]]=tsdata1[i-1, "cum_15"][[1]]*(1+tsdata1[i, "PR15"][[1]])
tsdata1[i, "cum_FF_SMB"][[1]]=tsdata1[i-1, "cum_FF_SMB"][[1]]*(1+tsdata1[i, "FF_SMB"][[1]])
tsdata1[i, "cum_FF_HML"][[1]]=tsdata1[i-1, "cum_FF_HML"][[1]]*(1+tsdata1[i, "FF_HML"][[1]])
}
plot(tsdata1$cum_mkt,
type = "l", col = "red", ylim = c(0, 350),
ylab = "cumulative return mkt")
lines(tsdata1$cum_FF_SMB, col = "blue",type = "l")
lines(tsdata1$cum_FF_HML, col = "green",type = "l")
View(tsdata)
View(tsdata1)
tsdata1[1, c("cum_mkt", "cum_15","cum_FF_SMB","cum_FF_HML")] <- 1
t1<-nrow(tsdata1)
for (i in 2:t1) {
tsdata1[i, "cum_mkt"][[1]]=tsdata1[i-1, "cum_mkt"][[1]]*(1+tsdata1[i, "r_mkt"][[1]])
tsdata1[i, "cum_15"][[1]]=tsdata1[i-1, "cum_15"][[1]]*(1+tsdata1[i, "PR15"][[1]])
tsdata1[i, "cum_FF_SMB"][[1]]=tsdata1[i-1, "cum_FF_SMB"][[1]]*(1+tsdata1[i, "FF_SMB"][[1]])
tsdata1[i, "cum_FF_HML"][[1]]=tsdata1[i-1, "cum_FF_HML"][[1]]*(1+tsdata1[i, "FF_HML"][[1]])
}
View(tsdata1)
plot(tsdata1$cum_mkt,
type = "l", col = "red", ylim = c(0, 350),
ylab = "cumulative return mkt")
lines(tsdata1$cum_FF_SMB, col = "blue",type = "l")
lines(tsdata1$cum_FF_HML, col = "green",type = "l")
plot(tsdata1$cum_FF_HML,
type = "l", col = "red", ylim = c(0, 100),
ylab = "cumulative return mkt")
lines(tsdata1$cum_FF_SMB, col = "blue",type = "l")
lines(tsdata1$cum_FF_HML, col = "green",type = "l")
plot(tsdata1$cum_FF_HML,
type = "l", col = "red", ylim = c(0, 10),
ylab = "cumulative return mkt")
lines(tsdata1$cum_FF_SMB, col = "blue",type = "l")
# time-series plot of cumulative returns
plot(tsdata1$cum_mkt,
type = "l", col = "red", ylim = c(0, 350),
ylab = "cumulative return mkt")
lines(tsdata1$cum_15, col = "blue",type = "l")
View(tsdata1)
mod_FF<- lm(tsdata1$exret_15 ~ tsdata1$exret_mkt,tsdata1$FF_HML)
summary(mod_FF)
?lm
mod_FF<- lm(tsdata1$exret_15 ~ tsdata1$exret_mkt+tsdata1$FF_HML)
summary(mod_FF)
mod_FF<- lm(tsdata1$exret_15 ~ tsdata1$exret_mkt+tsdata1$FF_HML+tsdata1$FF_SMB)
summary(mod_FF)
listofpackages <- c("ellipse","reshape2","ggplot2","dygraphs", "dplyr","forecast", "aod","readr","xlsx")
for (j in listofpackages){
if(sum(installed.packages()[, 1] == j) == 0) {
install.packages(j)
}
library(j, character.only = T)
}
urlfile="https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv"
COVID_all<-read_csv(url(urlfile))
LOMBARDIA=subset(COVID_all,denominazione_regione=="Lombardia",select=c(1:1,4:4,7:20))
VENETO=subset(COVID_all,denominazione_regione=="Veneto",select=c(1:1,4:4,7:20))
View(LOMBARDIA)
View(COVID_all)
REGIONS <- COVID_all[11908:11928,1:20]
POP = c(1311580, 562869,1947131,5801692,4459477,1215220,5879082,1550640,10060574,1525271,533373,305617,4356406,4029053,1639591,4999891,3729641,541380,882015,125666,4905854)
AREA=c(10795,9992,15080,13595,22451,7907,17207,5421,23861,9366,7398,4438,25399,19363,24090,25707,22993,6207,8456,3263,18316)
REGIONS$POP=POP
REGIONS$AREA=AREA
REGIONS$LETHALITY=(REGIONS$deceduti/REGIONS$POP)*1000000
REGIONS$DENSITY=REGIONS$POP/REGIONS$AREA
REGIONS$TOTCASI_R=(REGIONS$totale_casi/REGIONS$POP)*1000000
p <- ggplot(REGIONS, aes(DENSITY,LETHALITY)) + geom_point(colour="green",size=3) + geom_text(aes(label=denominazione_regione),hjust=0, vjust=0,colour="blue")
# Add regression line
p + geom_smooth(method = lm,colour="red")
p <- ggplot(REGIONS, aes(DENSITY,deceduti)) + geom_point(colour="green",size=3) + geom_text(aes(label=denominazione_regione),hjust=0, vjust=0,colour="blue")
# Add regression line
p + geom_smooth(method = lm,colour="red")
p <- ggplot(REGIONS, aes(DENSITY,TOTCASI_R)) + geom_point(colour="green",size=3) + geom_text(aes(label=denominazione_regione),hjust=0, vjust=0,colour="blue")
# Add regression line
p + geom_smooth(method = lm,colour="red")
p <- ggplot(REGIONS, aes(DENSITY,totale_casi)) + geom_point(colour="green",size=3) + geom_text(aes(label=denominazione_regione),hjust=0, vjust=0,colour="blue")
# Add regression line
p + geom_smooth(method = lm,colour="red")
install.packages("tibble")
Sys.which("make")
install.packages("ballr")
install.packages("ballr")
install.packages("nbastatR")
library("nbastatR")
help(package="nbastatR")
install.packages("BasketballAnalyzeR")
library("BasketballAnalyzeR")
help(package="BasketballAnalyzeR")
Tadd
Tadd.df = Tadd
View(Tadd.df)
help(package="BasketballAnalyzeR")
listofpackages <- c("shiny", "ggplot2", "hexbin", "dplyr", "httr", "jsonlite")
for (j in listofpackages){
if(sum(installed.packages()[, 1] == j) == 0) {
install.packages(j)
}
library(j, character.only = T)
}
#library(shiny)
#web applications Shiny
runGitHub("ballr", "toddwschneider")
shiny::runApp('C:/Users/Favero/Dropbox/R/tesi/maver/euroleagueViz')
version
#punto 1, clear environment, caricare directory, caricare dataset, caricare pacchetti
rm(list=ls())
setwd("C:/Users/remax/OneDrive/Desktop/esame")
#------------------------
# QUESTION 1
#------------------------
#clear the environment
rm(list=ls())
## ------------------------------------------------------------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
install.packages("rstudioapi")
# 1.
#Removes all items in Environment
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Install and load necessary packages
install.packages("ggplot2")
library(ggplot2)
# Define the logistic complement function
logistic_complement <- function(x, X2, X1, k, x0) {
return(X2 + (X1 - X2) / (1 + exp(-k * (x - x0))))
}
install.packages("ggplot2")
library(ggplot2)
# Define the logistic complement function
logistic_complement <- function(x, X2, X1, k, x0) {
return(X2 + (X1 - X2) / (1 + exp(-k * (x - x0))))
}
# Define the range of x values
x_values <- seq(min_x, max_x, length.out = 1000)  # Adjust min_x and max_x based on your data range
# Define the range of x values
x_values <- seq(0, 100, length.out = 1000)  # Adjust min_x and max_x based on your data range
X2 <-  # Your minimum value for y
X1 <-  # Your maximum value for y
k <-   # Adjust the steepness factor based on your preference
x0 <-  # Adjust the midpoint based on your data
# Calculate y values using the logistic complement function
y_values <- logistic_complement(x_values, X2, X1, k, x0)
X2 <- 50 # Your minimum value for y
X1 <- 80 # Your maximum value for y
k <- 1  # Adjust the steepness factor based on your preference
x0 <- 50 # Adjust the midpoint based on your data
# Calculate y values using the logistic complement function
y_values <- logistic_complement(x_values, X2, X1, k, x0)
data <- data.frame(x = x_values, y = y_values)
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
labs(x = "x", y = "y", title = "Logistic Complement Function") +
theme_minimal()
x_values <- seq(0, 100, length.out = 1000)  # Adjust min_x and max_x based on your data range
# Define the parameters
X1 <- 80 # Your maximum value for y
X2 <- 50 # Your minimum value for y
k <- 0.5  # Adjust the steepness factor based on your preference
x0 <- 50 # Adjust the midpoint based on your data
y_values <- logistic_complement(x_values, X1, X2, k, x0)
# Create a data frame for plotting
data <- data.frame(x = x_values, y = y_values)
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
labs(x = "x", y = "y", title = "Decreasing Logistic Complement Function") +
theme_minimal()
x_values <- seq(0, 100, length.out = 1000)  # Adjust min_x and max_x based on your data range
# Define the parameters
X1 <- 80 # Your maximum value for y
X2 <- 50 # Your minimum value for y
k <- 0.5  # Adjust the steepness factor based on your preference
x0 <- 10 # Adjust the midpoint based on your data
# Calculate y values using the logistic complement function
y_values <- logistic_complement(x_values, X1, X2, k, x0)
# Create a data frame for plotting
data <- data.frame(x = x_values, y = y_values)
# Plot the curve using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
labs(x = "x", y = "y", title = "Decreasing Logistic Complement Function") +
theme_minimal()
# Define the range of x values
x_values <- seq(0, 0.4, length.out = 1000)  # Adjust min_x and max_x based on your data range
# Define the parameters
X1 <- 2 # Your maximum value for y
X2 <- 0.05 # Your minimum value for y
k <- 0.5  # Adjust the steepness factor based on your preference
x0 <- 0.01 # Adjust the midpoint based on your data
# Calculate y values using the logistic complement function
y_values <- logistic_complement(x_values, X1, X2, k, x0)
# Create a data frame for plotting
data <- data.frame(x = x_values, y = y_values)
# Plot the curve using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
labs(x = "x", y = "y", title = "Decreasing Logistic Complement Function") +
theme_minimal()
X1 <- 2 # Your maximum value for y
X2 <- 0.05 # Your minimum value for y
k <- 0.5  # Adjust the steepness factor based on your preference
x0 <- 0.1 # Adjust the midpoint based on your data
# Calculate y values using the logistic complement function
y_values <- logistic_complement(x_values, X1, X2, k, x0)
# Create a data frame for plotting
data <- data.frame(x = x_values, y = y_values)
# Plot the curve using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
labs(x = "x", y = "y", title = "Decreasing Logistic Complement Function") +
theme_minimal()
X1 <- 2 # Your maximum value for y
X2 <- 0.05 # Your minimum value for y
k <- 1  # Adjust the steepness factor based on your preference
x0 <- 0.1 # Adjust the midpoint based on your data
# Calculate y values using the logistic complement function
y_values <- logistic_complement(x_values, X1, X2, k, x0)
# Create a data frame for plotting
data <- data.frame(x = x_values, y = y_values)
# Plot the curve using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
labs(x = "x", y = "y", title = "Decreasing Logistic Complement Function") +
theme_minimal()
X1 <- 2 # Your maximum value for y
X2 <- 0.05 # Your minimum value for y
k <- 100  # Adjust the steepness factor based on your preference
x0 <- 0.1 # Adjust the midpoint based on your data
# Calculate y values using the logistic complement function
y_values <- logistic_complement(x_values, X1, X2, k, x0)
# Create a data frame for plotting
data <- data.frame(x = x_values, y = y_values)
# Plot the curve using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
labs(x = "x", y = "y", title = "Decreasing Logistic Complement Function") +
theme_minimal()
# Define the parameters
X1 <- 2 # Your maximum value for y
X2 <- 0.05 # Your minimum value for y
k <- 100  # Adjust the steepness factor based on your preference
x0 <- 0.01 # Adjust the midpoint based on your data
# Calculate y values using the logistic complement function
y_values <- logistic_complement(x_values, X1, X2, k, x0)
# Create a data frame for plotting
data <- data.frame(x = x_values, y = y_values)
# Plot the curve using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
labs(x = "x", y = "y", title = "Decreasing Logistic Complement Function") +
theme_minimal()
X1 <- 2 # Your maximum value for y
X2 <- 0.05 # Your minimum value for y
k <- 90  # Adjust the steepness factor based on your preference
x0 <- 0.01 # Adjust the midpoint based on your data
# Calculate y values using the logistic complement function
y_values <- logistic_complement(x_values, X1, X2, k, x0)
# Create a data frame for plotting
data <- data.frame(x = x_values, y = y_values)
# Plot the curve using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
labs(x = "x", y = "y", title = "Decreasing Logistic Complement Function") +
theme_minimal()
X1 <- 2 # Your maximum value for y
X2 <- 0.05 # Your minimum value for y
k <- 90  # Adjust the steepness factor based on your preference
x0 <- 0.02 # Adjust the midpoint based on your data
# Calculate y values using the logistic complement function
y_values <- logistic_complement(x_values, X1, X2, k, x0)
# Create a data frame for plotting
data <- data.frame(x = x_values, y = y_values)
# Plot the curve using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
labs(x = "x", y = "y", title = "Decreasing Logistic Complement Function") +
theme_minimal()
X1 <- 2 # Your maximum value for y
X2 <- 0.05 # Your minimum value for y
k <- 90  # Adjust the steepness factor based on your preference
x0 <- 0.05 # Adjust the midpoint based on your data
# Calculate y values using the logistic complement function
y_values <- logistic_complement(x_values, X1, X2, k, x0)
# Create a data frame for plotting
data <- data.frame(x = x_values, y = y_values)
# Plot the curve using ggplot2
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
labs(x = "x", y = "y", title = "Decreasing Logistic Complement Function") +
theme_minimal()
# Clear environment and set working directory
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load necessary package
listofpackages <- c("ggplot2","dplyr","readxl","rlist","rstudioapi","ameco")
for (j in listofpackages) {
if (sum(installed.packages()[, 1] == j) == 0) {
install.packages(j)
}
library(j, character.only = TRUE)
}
potential_output_series <- ameco %>%
filter(grepl("potential output", title, ignore.case = TRUE))
# Clear environment and set working directory
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load necessary package
listofpackages <- c("ggplot2","dplyr","readxl","rlist","rstudioapi","ameco")
for (j in listofpackages) {
if (sum(installed.packages()[, 1] == j) == 0) {
install.packages(j)
}
library(j, character.only = TRUE)
}
